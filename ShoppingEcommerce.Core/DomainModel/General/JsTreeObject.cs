using ShoppingEcommerce.DataAccess;
using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.Serialization.Json;
using System.Text;

namespace ShoppingEcommerce.Core
{

    /// <summary>
    /// Đối tượng đại diện cho cây jstree dùng cho javascript
    ///{
    ///  id          : "string" // will be autogenerated if omitted
    ///  text        : "string" // node text
    ///  icon        : "string" // string for custom
    ///  state       : {
    ///    opened    : boolean  // is the node open
    ///    disabled  : boolean  // is the node disabled
    ///    selected  : boolean  // is the node selected
    ///    },
    ///  children    : []  // array of strings or objects
    ///  li_attr     : {}  // attributes for the generated LI node
    ///  a_attr      : {}  // attributes for the generated A node
    ///}
    /// </summary>
    public partial class JsTreeObject
    {
        public JsTreeObject()
        { 
            children = null;
          //  parent = "";
        }

      //  public string parent { get; set; }

        public string parentItem { get; set; }

        /// <summary>
        /// mã 
        /// </summary>
        public string id { get; set; }

        /// <summary>
        /// text hiển thị
        /// </summary>
        public string text { get; set; }

        /// <summary>
        /// biểu tượng icon
        /// </summary>
        public string icon { get; set; }

        /// <summary>
        /// trạng thái của node
        /// </summary>
        public JsTreeStateObject state { get; set; }

        /// <summary>
        /// node con nếu có
        /// </summary>
        public object children { get; set; }

        /// <summary>
        /// các thuộc tính thẻ li bổ sung
        /// </summary>
        public object li_attr { get; set; }

        /// <summary>
        /// các thuộc tính thẻ a bổ sung
        /// </summary>
        public object a_attr { get; set; }

        public const string jsTreeIconFolder = "";

        public const string jsTreeIconPerson = "";

        public const string jsTreeIconGroup = "";

        public string left_paramvalues { get; set; }

        public bool left_iscount { get; set; }

        public string left_paramnames { get; set; }
    }

    /// <summary>
    /// Trạng thái của 1 node trên cây
    /// </summary>
    public partial class JsTreeStateObject
    {
        /// <summary>
        /// chỉ định node có được mở hay không
        /// </summary>
        public bool opened { get; set; }

        /// <summary>
        /// chỉ định node có bị tắt tính năng
        /// </summary>
        public bool disabled { get; set; }

        /// <summary>
        /// chỉ định node có được chọn hay không
        /// </summary>
        public bool selected { get; set; }
    }

    /// <summary>
    /// 
    /// </summary>
    public class JSonTreeParseObject
    {
        /// <summary>
        /// Hàm thực hiện chuyển từ đối tượng thành Chuỗi Json
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="obj"></param>
        /// <returns></returns>
        public static string Serialize<T>(T obj)
        {
            DataContractJsonSerializer serializer = new DataContractJsonSerializer(obj.GetType());
            MemoryStream ms = new MemoryStream();
            serializer.WriteObject(ms, obj);
            string retVal = Encoding.UTF8.GetString(ms.ToArray());
            return retVal;
        }

        /// <summary>
        /// Hàm thực hiện chuyển từ chuỗi Json thành đối tượng
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="json"></param>
        /// <returns></returns>
        public static T Deserialize<T>(string json)
        {
            T obj = Activator.CreateInstance<T>();
            MemoryStream ms = new MemoryStream(Encoding.Unicode.GetBytes(json));
            DataContractJsonSerializer serializer = new DataContractJsonSerializer(obj.GetType());
            obj = (T)serializer.ReadObject(ms);
            ms.Close();
            return obj;
        }
    }
}